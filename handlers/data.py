# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from config import *
from keyboards import inline, reply
from database import db



async def send_update(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=reply.user_data_kb)



async def delete_data(message: types.Message):
    await message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?", reply_markup=inline.delete_data_kb)
    


async def choice_delete(call: types.CallbackQuery):
    user_id = call.from_user.id

    if call.data == 'yes':
        await db.delete_user_data(user_id)
        await call.message.answer("‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã", reply_markup=types.ReplyKeyboardRemove())

    elif call.data == 'no':
        await call.message.answer("üëç –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ—Ä—è–¥–∫–µ :)", reply_markup=types.ReplyKeyboardRemove())

    else:
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–±–æ '–î–∞', –ª–∏–±–æ '–ù–µ—Ç'")

    await call.answer()   # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–∞



async def update_data(message: types.Message):
    await message.answer("–î–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email!", reply_markup=types.ReplyKeyboardRemove())
    await UserRegistration.waiting_for_email.set()
    


async def get_email(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    email = message.text.strip() if message.text else None

    if await db.check_user_exists(user_id):
        await state.update_data(email=email)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ state
        await UserRegistration.waiting_for_phone.set()
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º e-mail –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await state.update_data(email=email)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ state
        await message.answer("Email –¥–æ–±–∞–≤–ª–µ–Ω")
        await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        await UserRegistration.waiting_for_phone.set()



async def get_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    phone = message.text

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π email –∏–∑ state
    user_data = await state.get_data()
    email = user_data.get('email')

    if not email:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥—è /start.")
        await state.finish()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await db.check_user_exists(user_id):
        await db.update_user_data(user_id=user_id, email=email, phone=phone)
        await message.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã üëå")

    else:
        await db.save_user_data(user_id=user_id, email=email, phone=phone)
        await message.answer("Email –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã. üõçÔ∏è")

    await state.finish()



