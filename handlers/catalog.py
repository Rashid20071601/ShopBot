# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from keyboards import inline, reply
from texts import texts
from catalog.models import *  # type: ignore
from asgiref.sync import sync_to_async
from logging_config import setup_logger

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logger()

'''============================================================================================================'''
async def show_categories(message: types.Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

    try:
        categories = await sync_to_async(lambda: list(Category.objects.values_list('name', flat=True)))()  # type: ignore

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ FSM
        await state.update_data(current_step='category', selected_category=None)
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: current_step='category'.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if not categories:
            logger.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            await message.answer(texts.if_not_category)
            await message.answer(texts.back, reply_markup=inline.back_kb)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        category_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for category in categories:
            category_kb.add(category)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–Ω–æ–ø–∫–∏

        await message.answer(texts.show_categories, reply_markup=category_kb)
        await message.answer(texts.back, reply_markup=inline.back_kb)
        logger.debug(f"–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥—è /start. ‚ôª")

'''============================================================================================================'''

'''============================================================================================================'''
async def show_products_by_category_wrapper(message: types.Message, state: FSMContext):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ show_products_by_category —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {message.text}.")

    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = await sync_to_async(lambda: list(Category.objects.values_list('name', flat=True)))()  # type: ignore

    if message.text in categories:
        await show_products_by_category(message, state)


async def show_products_by_category(message: types.Message, state: FSMContext, category=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category or message.text}.")

    try:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if category is None:
            category = message.text.strip() if message.text else None

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        selected_category = state_data.get('selected_category')

        # –ï—Å–ª–∏ category –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –±–µ—Ä–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if category is None:
            category = selected_category

        if not category:
            logger.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            await message.answer(texts.if_category_empty)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ FSM
        await state.update_data(current_step='product', selected_category=category)
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: current_step='product', selected_category='{category}'.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        category_check = await sync_to_async(lambda: Category.objects.filter(name=category).first())()  # type: ignore

        if not category_check:   # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–Ω–∞—á–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç
            logger.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            await message.answer(texts.if_not_category)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products = await sync_to_async(lambda: list(Product.objects.filter(category=category_check).values_list('product_id', 'name', 'price')))()  # type: ignore

        if not products:
            logger.warning(f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            await message.answer(texts.show_products_by_category_if_not_products, reply_markup=types.ReplyKeyboardRemove())
            await message.answer(texts.show_products_by_category_if_not_products_next, reply_markup=inline.back_kb)
        else:
            # –í—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            product_list = '\n'.join([f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüõçÔ∏è {i+1}. {product[1]}\nüíµ –¶–µ–Ω–∞: {product[2]} ‚ÇΩ' for i, product in enumerate(products)])
            await message.answer(f"üìÇ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': \n\n{product_list}\n\n\nüîç –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞!", reply_markup=types.ReplyKeyboardRemove())
            await message.answer(texts.back, reply_markup=inline.back_kb)
            logger.debug(f"–¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(f"‚ö†Ô∏è –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    
'''============================================================================================================'''

'''============================================================================================================'''
async def show_product_details_wrapper(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä: {message.text}.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    current_step = state_data.get('current_step')

    if current_step == 'product':
        await show_product_details(message, state)


async def show_product_details(message: types.Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ FSM
    await state.update_data(current_step='product_details')
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: current_step='product_details'.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    selected_category = state_data.get('selected_category')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if selected_category is None:
        logger.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await message.answer(texts.if_category_empty)
        return
    
    product_index = int(message.text) - 1
    category = await sync_to_async(lambda: Category.objects.get(name=selected_category))()  # type: ignore

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = await sync_to_async(lambda: list(Product.objects.filter(category=category).values_list('product_id', 'name', 'description', 'price', 'photo')))()  # type: ignore

    if 0 <= product_index < len(products):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
        product_id, name, description, price, photo = products[product_index]
        photo_path = f"media/{photo}"
        await message.answer_photo(
            photo=open(photo_path, 'rb'),
            caption=f"üõçÔ∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üéØ <i>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å!</i>",
            reply_markup=inline.cart_kb(product_id),
            parse_mode="HTML"
        )
        logger.debug(f"–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ {product_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

    else:
        logger.warning(f"–¢–æ–≤–∞—Ä —Å –∏–Ω–¥–µ–∫—Å–æ–º {product_index} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await message.answer(texts.show_product_details_if_not_product, reply_markup=inline.back_kb)

    await state.reset_state(with_data=False)
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω–æ.")