# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from keyboards import inline, reply
import logging
from catalog.models import * # type: ignore
from asgiref.sync import sync_to_async


'''============================================================================================================'''
async def show_categories(message: types.Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î"""
    # await config.CategoryState.waiting_for_category.set()
    categories = await sync_to_async(lambda: list(Category.objects.values_list('name', flat=True)))() # type: ignore

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ FSM
    await state.update_data(current_step='category', selected_category=None)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    category_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for category in categories:
        category_kb.add(category)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–Ω–æ–ø–∫–∏

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=category_kb)

'''============================================================================================================'''

'''============================================================================================================'''
async def show_products_by_category_wrapper(message: types.Message, state: FSMContext):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ show_products_by_category —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è"""

    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = await sync_to_async(lambda: list(Category.objects.values_list('name', flat=True)))()  # type: ignore

    if message.text in categories:
        await show_products_by_category(message, state)


async def show_products_by_category(message: types.Message, state: FSMContext, category=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    try:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if category is None:
            category = message.text.strip() if message.text else None

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        selected_category = state_data.get('selected_category')

        # –ï—Å–ª–∏ category –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –±–µ—Ä–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if category is None:
            category = selected_category

        if not category:
            await message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ FSM
        await state.update_data(current_step='product', selected_category=category)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        category_check = await sync_to_async(lambda: Category.objects.filter(name=category).first())() # type: ignore

        if not category_check:   # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–Ω–∞—á–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç
            await message.answer("–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products = await sync_to_async(lambda: list(Product.objects.filter(category=category_check).values_list('product_id', 'name', 'price')))() # type: ignore

        if not products:
            await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=types.ReplyKeyboardRemove())
            await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ ‚úÖ", reply_markup=inline.back_kb)
        else:
            # –í—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            product_list = '\n'.join([f'{i+1}. {product[1]} - {product[2]} ‚ÇΩ' for i, product in enumerate(products)])
            await message.answer(f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': \n\n{product_list}", reply_markup=types.ReplyKeyboardRemove())
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.", reply_markup=inline.back_kb)

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
'''============================================================================================================'''

'''============================================================================================================'''
async def show_product_details_wrapper(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    current_step = state_data.get('current_step')

    if current_step == 'product':
        await show_product_details(message, state)


async def show_product_details(message: types.Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–±—Ä–∞–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ FSM
    await state.update_data(current_step='product_details')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    selected_category = state_data.get('selected_category')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if selected_category is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ /catalog.")
        return
    
    product_index = int(message.text)-1
    category = await sync_to_async(lambda: Category.objects.get(name=selected_category))() # type: ignore

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = await sync_to_async(lambda: list(Product.objects.filter(category=category).values_list('product_id', 'name', 'description', 'price', 'photo')))() # type: ignore

    if 0 <= product_index < len(products):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
        product_id, name, description, price, photo = products[0]
        photo_path = f"media/{photo}"
        await message.answer_photo(
            photo=open(photo_path, 'rb'),
            caption=f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\nüí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ",
            reply_markup=inline.cart_kb(product_id)
        )

    else:
        await message.answer("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    
    await state.reset_state(with_data=False)

