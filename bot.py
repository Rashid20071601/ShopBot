# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.storage import FSMContext
import logging
import asyncio
from utils import misc
from config import *
from keyboards import inline, reply
from database import db

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
user_category = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
categories = []  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π


async def on_startup(dp):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    await db.create_user_table()
    await db.create_product_table()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if await db.check_user_exists(user_id):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω! üõçÔ∏è\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω! üõçÔ∏è\n–ú—ã –Ω–∞—á–Ω–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail.")
        await UserRegistration.waiting_for_email.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
                        "\n/start - –ù–∞—á–∞—Ç—å"
                        "\n/help - –ü–æ–º–æ—â—å"
                        "\n/update - –û–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
                        "\n/catalog - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.message_handler(commands=['catalog'])
async def show_categories(message: types.Message):
    global categories
    conn = await db.create_connection()
    cursor = await conn.cursor()
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = await cursor.execute("SELECT DISTINCT category FROM products")
    categories = await categories.fetchall()
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    category_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if categories:
        for category in categories:
            category_kb.add(category[0])
        await conn.close()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=category_kb)
    else:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(lambda message: any(category[0].lower() == message.text.strip().lower() for category in categories))
async def show_products_by_category(message: types.Message):
    category = message.text.strip()
    conn = await db.create_connection()
    cursor = await conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    category_check = await cursor.execute("SELECT DISTINCT category FROM products WHERE category=?", (category,))
    category_check = await category_check.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    if not category_check:   # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–Ω–∞—á–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç
        await message.answer("–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await conn.close()
        return
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    user_category[message.from_user.id] = category
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = await cursor.execute("SELECT product_id, name, price FROM products WHERE category=?", (category,))
    products = await products.fetchall()
    await conn.close()
    if products:
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        product_list = '\n'.join([f'{i+1}. {product[1]} - {product[2]} ‚ÇΩ' for i, product in enumerate(products)])
        await message.answer(f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': \n\n{product_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
    else:
        await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(lambda message: message.text.isdigit())
async def show_product_details(message: types.Message):
    user_id = message.from_user.id
    print(f"user_category: {user_category}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if user_id not in user_category:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ /catalog.")
        return
    product_index = int(message.text)-1
    category = user_category[user_id]   # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    conn = await db.create_connection()
    cursor = await conn.cursor()
    print(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = await cursor.execute("SELECT product_id, name, description, price, photo FROM products WHERE category=?", (category,))
    products = await products.fetchall()
    print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: {products}")
    await conn.close()
    if 0 <= product_index < len(products):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
        _, name, description, price, photo = products[product_index]
        await message.answer_photo(
            photo=open(photo, 'rb'),
            caption=f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\nüí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ"
        )
    else:
        await message.answer("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update
@dp.message_handler(commands=['update'])
async def send_update(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=reply.user_data_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(lambda message: message.text == "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚ôª")
async def update_data(message: types.Message):
    await message.answer("–î–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email!")
    await UserRegistration.waiting_for_email.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è e-mail
@dp.message_handler(state=UserRegistration.waiting_for_email)
async def get_email(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    email = message.text
    if await db.check_user_exists(user_id):
        await db.update_user_data(user_id=user_id, email=email, phone=None)
        await UserRegistration.waiting_for_phone.set()
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    else:
        print(2)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º e-mail –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.save_user_data(user_id=user_id, email=email, phone=None)
        await message.answer("Email –¥–æ–±–∞–≤–ª–µ–Ω")
        await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        await UserRegistration.waiting_for_phone.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=UserRegistration.waiting_for_phone)
async def get_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    phone = message.text
    if await db.check_user_exists(user_id):
        await db.update_user_data(user_id=user_id, email=None, phone=phone)
        await state.finish()
        await message.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã üëå")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await db.save_user_data(user_id=user_id, email=None, phone=phone)
        await message.answer("Email –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã")
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã. üõçÔ∏è")
        await state.finish()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)